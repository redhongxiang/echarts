<?xml version="1.0" encoding="utf-8"?>
<scripts><scripts><caption>Aggregate</caption><script><caption>AVG</caption><hint>Returns the average value of expr</hint><commands>AVG(expr)</commands></script><script><caption>BIT_AND</caption><hint>Returns the bitwise AND of all bits in expr. The calculation is performed with 64-bit (BIGINT precision)</hint><commands>BIT_AND(expr)</commands></script><script><caption>BIT_OR</caption><hint>Returns the bitwise OR of all bits in expr. The calculation is performed with 64-bit (BIGINT precision)</hint><commands>BIT_OR(expr)</commands></script><script><caption>BIT_XOR</caption><hint>Returns the bitwise XOR of all bits in expr</hint><commands>BIT_XOR(expr)</commands></script><script><caption>COUNT</caption><hint>Returns a count of the number of non-NULL values in the rows retrieved by a SELECT statement</hint><commands>COUNT(expr)</commands></script><script><caption>GROUP_CONCAT</caption><hint>Returns a string result with the concatenated non-NULL  values from a group</hint><commands>GROUP_CONCAT(expr)</commands></script><script><caption>MAX</caption><hint>Returns the maximum value of expr. May take a string argument; in such cases it returns the maximum string value</hint><commands>MAX(expr)</commands></script><script><caption>MIN</caption><hint>Returns the minimum value of expr. May take a string argument; in such cases it returns the minimum string value</hint><commands>MIN(expr)</commands></script><script><caption>STD</caption><hint>Returns the standard deviation of expr. This is an extension to ANSI SQL. The STDDEV() form of this function is provided for Oracle compatability</hint><commands>STD(expr)</commands></script><script><caption>STDDEV</caption><hint>Returns the standard deviation of expr. This is an extension to ANSI SQL. The STDDEV() form of this function is provided for Oracle compatability</hint><commands>STDDEV(expr)</commands></script><script><caption>STDDEV_POP</caption><hint>Returns the population standard deviation of expr (the square root of VAR_POP())</hint><commands>STDDEV_POP(expr)</commands></script><script><caption>STDDEV_SAMP</caption><hint>Returns the sample standard deviation of expr (the square root of VAR_SAMP()</hint><commands>STDDEV_SAMP(expr)</commands></script><script><caption>SUM</caption><hint>Returns the sum of expr. Note that if the return set has no rows, it returns NULL</hint><commands>SUM(expr)</commands></script><script><caption>VARIANCE</caption><hint>Returns the population standard variance of expr</hint><commands>VARIANCE(expr)</commands></script><script><caption>VAR_POP</caption><hint>Returns the population standard variance of expr</hint><commands>VAR_POP(expr)</commands></script><script><caption>VAR_SAMP</caption><hint>Returns the sample variance of expr</hint><commands>VAR_SAMP(expr)</commands></script></scripts><scripts><caption>Bit</caption><script><caption>BIT_COUNT</caption><hint>Returns the number of bits that are set in the argument N</hint><commands>BIT_COUNT(N)</commands></script></scripts><scripts><caption>Comparison</caption><script><caption>COALESCE</caption><hint>Returns first non-NULL element in list</hint><commands>COALESCE(list)</commands></script><script><caption>GREATEST</caption><hint>Returns the largest (maximum-valued) argument. The arguments are compared using the same rules as for LEAST</hint><commands>GREATEST(X,Y,...)</commands></script><script><caption>INTERVAL</caption><hint>Returns 0 if N &lt; N1, 1 if N &lt; N2 and so on</hint><commands>INTERVAL(N,N1,N2,N3,...)</commands></script><script><caption>ISNULL</caption><hint>If expr is NULL, ISNULL() returns 1, otherwise it returns 0</hint><commands>ISNULL(expr)</commands></script><script><caption>LEAST</caption><hint>With two or more arguments, returns the smallest (minimum-valued) argument</hint><commands>LEAST(X,Y,...)</commands></script><script><caption>LIKE</caption><hint>Pattern matching using SQL simple regular expression comparison</hint><commands>expr LIKE pat [ESCAPE 'escape-char']</commands></script><script><caption>REGEXP</caption><hint>Performs a pattern match of a string expression expr against a pattern pat. The pattern can be an extended regular expression</hint><commands>expr REGEXP pat, expr RLIKE pat</commands></script><script><caption>STRCMP</caption><hint>returns 0 if the strings are the same, -1 if the first argument is smaller than the second according to the current sort order, and 1 otherwise</hint><commands>STRCMP(expr1,expr2)</commands></script></scripts><scripts><caption>Control Flow</caption><script><caption>IF</caption><hint>If expr1 is TRUE (expr1 &lt;&gt; 0 and expr1 &lt;&gt; NULL) then IF() returns expr2, else it returns expr</hint><commands>IF(expr1,expr2,expr3)</commands></script><script><caption>IFNULL</caption><hint>If expr1 is not NULL, IFNULL() returns expr1, else it returns expr2</hint><commands>IFNULL(expr1,expr2)</commands></script><script><caption>NULLIF</caption><hint>If expr1 = expr2 is true, return NULL else return expr1</hint><commands>NULLIF(expr1,expr2)</commands></script><script><caption>UNIX_TIMESTAMP</caption><hint>If called with no argument, returns a Unix timestamp (seconds since "1970-01-01 00:00:00" GMT). If UNIX_TIMESTAMP() is called with a date argument, it returns the value of the argument as seconds since "1970-01-01 00:00:00" GMT</hint><commands>UNIX_TIMESTAMP(date)</commands></script></scripts><scripts><caption>Date and Time</caption><script><caption>ADDDATE</caption><hint>Performs date arithmetic</hint><commands>ADDDATE(date,INTERVAL expr type)</commands></script><script><caption>ADDTIME</caption><hint>Performs time arithmetic</hint><commands>ADDTIME(expr,expr2)</commands></script><script><caption>CONVERT_TZ</caption><hint>Converts a datetime value dt from time zone given by from_tz to the time zone given by to_tz</hint><commands>CONVERT_TZ(dt,from_tz,to_tz)</commands></script><script><caption>CURDATE</caption><hint>Returns today's date as a value in "YYYY-MM-DD" or YYYYMMDD format, depending on whether the function is used in a string or numeric context</hint><commands>CURDATE()</commands></script><script><caption>CURTIME</caption><hint>Returns the current time as a value in "HH:MM:SS" or HHMMSS format, depending on whether the function is used in a string or numeric context</hint><commands>CURTIME()</commands></script><script><caption>DATE</caption><hint>Extracts the date part of the date or datetime expression expr</hint><commands>DATE(expr)</commands></script><script><caption>DATEDIFF</caption><hint>Returns the number of days between the start date expr and the end date expr2</hint><commands>DATEDIFF(expr,expr2)</commands></script><script><caption>DATE_ADD</caption><hint>Performs date arithmetic</hint><commands>DATE_ADD(date,INTERVAL expr type)</commands></script><script><caption>DATE_FORMAT</caption><hint>Formats the date value according to the format string</hint><commands>DATE_FORMAT(date,format)</commands></script><script><caption>DATE_SUB</caption><hint>Performs date arithmetic</hint><commands>DATE_SUB(date,INTERVAL expr type)</commands></script><script><caption>DAYNAME</caption><hint>Returns the name of the weekday for date</hint><commands>DAYNAME(date)</commands></script><script><caption>DAYOFMONTH</caption><hint>Returns the day of the month for date, in the range 1 to 31</hint><commands>DAYOFMONTH(date)</commands></script><script><caption>DAYOFWEEK</caption><hint>Returns the weekday index for date (1 = Sunday, 2 = Monday, ... 7 = Saturday). These index values correspond to the ODBC standard</hint><commands>DAYOFWEEK(date)</commands></script><script><caption>DAYOFYEAR</caption><hint>Returns the day of the year for date, in the range 1 to 366</hint><commands>DAYOFYEAR(date)</commands></script><script><caption>EXTRACT</caption><hint>EXTRAC</hint><commands>EXTRACT</commands></script><script><caption>FROM_DAYS</caption><hint>Given a daynumber N, returns a DATE value</hint><commands>FROM_DAYS(N)</commands></script><script><caption>FROM_UNIXTIME</caption><hint>Returns a representation of the unix_timestamp argument as a value in "YYYY-MM-DD HH:MM:SS" or YYYYMMDDHHMMSS format, depending on whether the function is used in a string or numeric context</hint><commands>FROM_UNIXTIME(unix_timestamp,format)</commands></script><script><caption>GET_FORMAT</caption><hint>Returns a format string</hint><commands>GET_FORMAT(DATE|TIME|DATETIME,'EUR'|'USA'|'JIS'|'ISO'|'INTERNAL')</commands></script><script><caption>HOUR</caption><hint>Returns the hour for time, in the range 0 to 23</hint><commands>HOUR(time)</commands></script><script><caption>LAST_DAY</caption><hint>Takes a date or datetime value and returns the corresponding value for the last day of the month</hint><commands>LAST_DAY(date)</commands></script><script><caption>MAKEDATE</caption><hint>Returns a date, given year and day-of-year values</hint><commands>MAKEDATE(year,dayofyear)</commands></script><script><caption>MAKETIME</caption><hint>Returns a time value calculated from the hour, minute, and second arguments</hint><commands>MAKETIME(hour,minute,second)</commands></script><script><caption>MICROSECOND</caption><hint>Returns the microseconds from the time or datetime expression expr as a number in the range from 0 to 999999</hint><commands>MICROSECOND(expr)</commands></script><script><caption>MINUTE</caption><hint>Returns the minute for time, in the range 0 to 59</hint><commands>MINUTE(time)</commands></script><script><caption>MONTH</caption><hint>Returns the month for date, in the range 1 to 12</hint><commands>MONTH(date)</commands></script><script><caption>MONTHNAME</caption><hint>Returns the name of the month for date</hint><commands>MONTHNAME(date)</commands></script><script><caption>NOW</caption><hint>Returns the current date and time as a value in "YYYY-MM-DD HH:MM:SS" or YYYYMMDDHHMMSS format, depending on whether the function is used in a string or numeric context</hint><commands>NOW()</commands></script><script><caption>PERIOD_ADD</caption><hint>Adds N months to period P (in the format YYMM or YYYYMM). Returns a value in the format YYYYMM</hint><commands>PERIOD_ADD(P,N)</commands></script><script><caption>PERIOD_DIFF</caption><hint>Returns the number of months between periods P1 and P2. P1 and P2 should be in the format YYMM or YYYYMM</hint><commands>PERIOD_DIFF(P1,P2)</commands></script><script><caption>QUARTER</caption><hint>Returns the quarter of the year for date, in the range 1 to 4</hint><commands>QUARTER(date)</commands></script><script><caption>SECOND</caption><hint>Returns the minute for time, in the range 0 to 59</hint><commands>SECOND(time)</commands></script><script><caption>SEC_TO_TIME</caption><hint>Returns the seconds argument, converted to hours, minutes and seconds, as a value in "HH:MM:SS" or HHMMSS format, depending on whether the function is used in a string or numeric context</hint><commands>SEC_TO_TIME(seconds)</commands></script><script><caption>STR_TO_DATE</caption><hint>This is the reverse function of the DATE_FORMAT() function</hint><commands>STR_TO_DATE(str,format)</commands></script><script><caption>SUBDATE</caption><hint>Performs date arithmetic</hint><commands>SUBDATE(date,INTERVAL expr type)</commands></script><script><caption>SYSDATE</caption><hint>Returns the current date and time as a value in "YYYY-MM-DD HH:MM:SS" or YYYYMMDDHHMMSS format, depending on whether the function is used in a string or numeric context</hint><commands>SYSDATE()</commands></script><script><caption>TIME</caption><hint>Extracts the time part of the time or datetime expression expr</hint><commands>TIME(expr)</commands></script><script><caption>TIMEDIFF</caption><hint>Returns the time between the start time expr and the end time expr2</hint><commands>TIMEDIFF(expr,expr2)</commands></script><script><caption>TIMESTAMP</caption><hint>Returns the date or datetime expression expr as a datetime valu</hint><commands>TIMESTAMP(expr)</commands></script><script><caption>TIMESTAMPADD</caption><hint>Adds the integer expression int_expr to the date or datetime expression datetime_expr</hint><commands>TIMESTAMPADD(interval,int_expr,datetime_expr)</commands></script><script><caption>TIMESTAMPDIFF</caption><hint>Returns the integer difference between the date or datetime expressions datetime_expr1 and datetime_expr2</hint><commands>TIMESTAMPDIFF(interval,datetime_expr1,datetime_expr2)</commands></script><script><caption>TIME_FORMAT</caption><hint>This is used like the DATE_FORMAT() function, but for time.</hint><commands>TIME_FORMAT(time,format)</commands></script><script><caption>TIME_TO_SEC</caption><hint>Returns the time argument, converted to seconds</hint><commands>TIME_TO_SEC(time)</commands></script><script><caption>TO_DAYS</caption><hint>Given a date date, returns a daynumber (the number of days since year 0)</hint><commands>TO_DAYS(date)</commands></script><script><caption>UTC_DATE</caption><hint>Returns the current UTC date</hint><commands>UTC_DATE()</commands></script><script><caption>UTC_TIME</caption><hint>Returns the current UTC time</hint><commands>UTC_TIME()</commands></script><script><caption>UTC_TIMESTAMP</caption><hint>Returns the current UTC date and tim</hint><commands>UTC_TIMESTAMP()</commands></script><script><caption>WEEK</caption><hint>With a single argument, returns the week for date, in the range 0 to 5</hint><commands>WEEK(date)</commands></script><script><caption>WEEKDAY</caption><hint>Returns the weekday index for date (0 = Monday, 1 = Tuesday, ... 6 = Sunday)</hint><commands>WEEKDAY(date)</commands></script><script><caption>WEEKOFYEAR</caption><hint>Returns the calendar week of the date as a number</hint><commands>WEEKOFYEAR(date)</commands></script><script><caption>YEAR</caption><hint>Returns the year for date, in the range 1000 to 9999</hint><commands>YEAR(date)</commands></script><script><caption>YEARWEEK</caption><hint>Returns year and week for a date. The second arguments works exactly like the second argument to WEEK()</hint><commands>YEARWEEK(date,first)</commands></script><scripts><caption>Formats</caption><script><caption>Abbreviated month name</caption><hint>Abbreviated month name (Jan..Dec)</hint><commands>%b</commands></script><script><caption>Abbreviated weekday name</caption><hint>Abbreviated weekday name (Sun..Sat)</hint><commands>%a</commands></script><script><caption>AM or PM</caption><hint>AM or PM</hint><commands>%p</commands></script><script><caption>Day of month (0..31)</caption><hint>Day of the month, numeric (0..31)</hint><commands>%e</commands></script><script><caption>Day of month (00..31)</caption><hint>Day of the month, numeric (00..31)</hint><commands>%d</commands></script><script><caption>Day of month with suffix</caption><hint>Day of the month with English suffix (0th, 1st, 2nd, 3rd, etc.)</hint><commands>%D</commands></script><script><caption>Day of week</caption><hint>Day of the week (0=Sunday..6=Saturday)</hint><commands>%w</commands></script><script><caption>Day of year</caption><hint>Day of year (001..366)</hint><commands>%j</commands></script><script><caption>Hour (0..23)</caption><hint>Hour (0..23)</hint><commands>%k</commands></script><script><caption>Hour (00..23)</caption><hint>Hour (00..23)</hint><commands>%H</commands></script><script><caption>Hour (01..12) alt</caption><hint>Hour (01..12) Alternative to '%h'</hint><commands>%I</commands></script><script><caption>Hour (01..12)</caption><hint>Hour (01..12). Alternative to '%I'</hint><commands>%h</commands></script><script><caption>Hour (1..12)</caption><hint>Hour (1..12)</hint><commands>%l</commands></script><script><caption>Literal %</caption><hint>A literal '%'</hint><commands>%%</commands></script><script><caption>Minutes (00..59)</caption><hint>Minutes, numeric (00..59)</hint><commands>%i</commands></script><script><caption>Month (0..12)</caption><hint>Month, numeric (0..12)</hint><commands>%c</commands></script><script><caption>Month (00..12)</caption><hint>Month, numeric (00..12)</hint><commands>%m</commands></script><script><caption>Month name</caption><hint>Month name (January..December)</hint><commands>%M</commands></script><script><caption>Seconds (00..59) alt</caption><hint>Seconds (00..59). Alternative to '%S'</hint><commands>%s</commands></script><script><caption>Seconds (00..59)</caption><hint>Seconds (00..59). Alternative to '%s'</hint><commands>%S</commands></script><script><caption>Time (12-hour)</caption><hint>Time, 12-hour (hh:mm:ss [AM | PM])</hint><commands>%r</commands></script><script><caption>Time (24-hour)</caption><hint>Time, 24-hour (hh:mm:ss)</hint><commands>%T</commands></script><script><caption>Weekday name</caption><hint>Weekday name (Sunday..Saturday)</hint><commands>%W</commands></script><script><caption>Year (2 digits)</caption><hint>Year, numeric, 2 digits</hint><commands>%y</commands></script><script><caption>Year (4 digits)</caption><hint>Year, numeric, 4 digits</hint><commands>%Y</commands></script></scripts><scripts><caption>Types</caption><script><caption>DAY</caption><hint>Expression is number of DAYS</hint><commands>DAY</commands></script><script><caption>DAY_HOUR</caption><hint>Expression is number of DAYS and HOURS in "DAYS HOURS" format</hint><commands>DAY_HOUR</commands></script><script><caption>DAY_MINUTE</caption><hint>Expression is number of DAYS, HOURS and MINUTES in "DAYS HOURS:MINUTES" format</hint><commands>DAY_MINUTE</commands></script><script><caption>DAY_SECOND</caption><hint>Expression is number of DAYS, HOURS, MINUTES and SECONDS in "DAYS HOURS:MINUTES:SECONDS" format</hint><commands>DAY_SECOND</commands></script><script><caption>HOUR</caption><hint>Expression is number of HOURS</hint><commands>HOUR</commands></script><script><caption>HOUR_MINUTE</caption><hint>Expression is number of HOURS and MINUTES in "HOURS:MINUTES" format</hint><commands>HOUR_MINUTE</commands></script><script><caption>HOUR_SECOND</caption><hint>Expression is number of HOURS, MINUTES and SECONDS in "HOURS:MINUTES:SECONDS" format</hint><commands>HOUR_SECOND</commands></script><script><caption>MINUTE</caption><hint>Expression is number of MINUTES</hint><commands>MINUTE</commands></script><script><caption>MINUTE_SECOND</caption><hint>Expression is number of MINUTES and SECONDS in "MINUTES:SECONDS" format</hint><commands>MINUTE_SECOND</commands></script><script><caption>MONTH</caption><hint>Expression is number of MONTHS</hint><commands>MONTH</commands></script><script><caption>SECOND</caption><hint>Expression is number of SECONDS</hint><commands>SECOND</commands></script><script><caption>YEAR</caption><hint>Expression is number of YEARS</hint><commands>YEAR</commands></script><script><caption>YEAR_MONTH</caption><hint>Expression is number of YEARS and MONTHS in "YEARS-MONTHS" format</hint><commands>YEAR_MONTH</commands></script></scripts></scripts><scripts><caption>Encryption</caption><script><caption>AES_ENCRYPT</caption><hint>These functions allow encryption and decryption of data using the official AES algorithm</hint><commands>AES_ENCRYPT(str,key_str)</commands></script><script><caption>DECODE</caption><hint>Descrypts the encrypted string crypt_str using pass_str as the password. crypt_str should be a string returned from ENCODE()</hint><commands>DECODE(crypt_str,pass_str)</commands></script><script><caption>DES_DECRYPT</caption><hint>Decrypts a string encrypted with DES_ENCRYPT()</hint><commands>DES_DECRYPT(crypt_str[,key_str])</commands></script><script><caption>DES_ENCRYPT</caption><hint>Encrypts the string with the given key using the Triple-DES algorithm</hint><commands>DES_ENCRYPT(str[,(key_num|key_str)])</commands></script><script><caption>ENCODE</caption><hint>Encrypt str using pass_str as the password. To decrypt the result, use DECODE(). The results is a binary string of the same length as string. If you want to save it in a column, use a BLOB column type</hint><commands>ENCODE(str,pass_str)</commands></script><script><caption>MD5</caption><hint>Calculates a MD5 checksum for the string. Value is returned as a 32 long hex number that may, for example, be used as a hash key</hint><commands>MD5(string)</commands></script><script><caption>OLD_PASSWORD</caption><hint>Returns the value of the pre-4.1 implementation of PASSWORD(</hint><commands>OLD_PASSWORD(str)</commands></script><script><caption>PASSWORD</caption><hint>Calculates a password string from the plaintext password str. This is the function that is used for encrypting MySQL passwords for storage in the Password column of the user grant table</hint><commands>PASSWORD(str)</commands></script><script><caption>SHA1</caption><hint>Calculates an SHA1 160-bit checksum for the string</hint><commands>SHA1(str)</commands></script></scripts><scripts><caption>Geometry</caption><script><caption>AsBinary</caption><hint>Converts a value in internal geometry format to its WKB representation</hint><commands>AsBinary(g)</commands></script><script><caption>AsText</caption><hint>Converts a value in internal geometry format to its WKT representation</hint><commands>AsText(g)</commands></script><script><caption>GeomFromText</caption><hint>Converts a string value from its WKT representation into internal geometry format</hint><commands>GeomFromText(wkt[,srid])</commands></script><script><caption>GeomFromWKB</caption><hint>Converts a binary value from its WKB representation into internal geometry format</hint><commands>GeomFromWKB(wkb[,srid])</commands></script></scripts><scripts><caption>Information</caption><script><caption>BENCHMARK</caption><hint>Executes the expression expr repeatedly count times. It may be used to time how fast MySQL processes the expression</hint><commands>BENCHMARK(count,expr)</commands></script><script><caption>CHARSET</caption><hint>Returns the character set of the string argument</hint><commands>CHARSET(str)</commands></script><script><caption>COERCIBILITY</caption><hint>Returns the collation coercibility value of the string argument</hint><commands>COERCIBILITY(str)</commands></script><script><caption>COLLATION</caption><hint>Returns the collation for the character set of the string argument</hint><commands>COLLATION(str)</commands></script><script><caption>CONNECTION_ID</caption><hint>Returns the connection id (thread_id) for the connection. Every connection has its own unique id</hint><commands>CONNECTION_ID()</commands></script><script><caption>CURRENT_USER</caption><hint>Returns the username and hostname combination that the current session was authenticated as</hint><commands>CURRENT_USER()</commands></script><script><caption>DATABASE</caption><hint>Returns the current database name</hint><commands>DATABASE()</commands></script><script><caption>ENCRYPT</caption><hint>Encrypt str using the Unix crypt() system call. The salt argument should be a string with two characters. (As of MySQL 3.22.16, salt may be longer than two characters.</hint><commands>ENCRYPT(str[,salt])</commands></script><script><caption>EXPLAIN</caption><hint>Returns the description of the given Table or SELECT quer</hint><commands>EXPLAIN()</commands></script><script><caption>FOUND_ROWS</caption><hint>A SELECT statement may include a LIMIT clause to restrict the number of rows the server returns to the client</hint><commands>FOUND_ROWS()</commands></script><script><caption>LAST_INSERT_ID</caption><hint>Returns the last automatically generated value that was inserted into an AUTO_INCREMENT column</hint><commands>LAST_INSERT_ID([expr])</commands></script><script><caption>ROW_COUNT</caption><hint>Returns the number of rows updated, inserted, or deleted by the preceding statement</hint><commands>ROW_COUNT()</commands></script><script><caption>USER</caption><hint>Returns the current MySQL user name</hint><commands>USER()</commands></script><script><caption>VERSION</caption><hint>Returns a string indicating the MySQL server version</hint><commands>VERSION()</commands></script></scripts><scripts><caption>Join</caption><script><caption>CROSS</caption><hint>Cross Joi</hint><commands>table_reference CROSS JOIN table_reference [join_condition]</commands></script><script><caption>INNER</caption><hint>Inner Joi</hint><commands>table_reference INNER JOIN table_reference [join_condition]</commands></script><script><caption>LEFT OUTER</caption><hint>Left Outer Joi</hint><commands>table_reference LEFT OUTER JOIN table_reference join_condition</commands></script><script><caption>LEFT</caption><hint>Left Joi</hint><commands>table_reference LEFT JOIN table_reference [join_condition]</commands></script><script><caption>RELEASE_LOCK</caption><hint>Releases the lock named by the string str that was obtained with GET_LOCK(). Returns 1 if the lock was released, 0 if the lock wasn't locked by this thread (in which case the lock is not released) and NULL if the named lock didn't exist</hint><commands>RELEASE_LOCK(str)</commands></script><script><caption>RIGHT OUTER</caption><hint>Right Outer Joi</hint><commands>table_reference RIGHT OUTER JOIN table_reference join_condition</commands></script><script><caption>RIGHT</caption><hint>Right Joi</hint><commands>table_reference RIGHT JOIN table_reference [join_condition]</commands></script></scripts><scripts><caption>Miscellaneous</caption><script><caption>DEFAULT</caption><hint>Returns the default value for a table column</hint><commands>DEFAULT(col_name)</commands></script><script><caption>FORMAT</caption><hint>Formats the number X to a format like "#,###,###.##", rounded to D decimals. If D is 0, the result will have no decimal point or fractional part</hint><commands>FORMAT(X,D)</commands></script><script><caption>GET_LOCK</caption><hint>Tries to obtain a lock with a name given by the string str, with a timeout of timeout seconds. Returns 1 if the lock was obtained successfully, 0 if the attempt timed out, or NULL if an error occurred (such as running out of memory or the thread was killed with mysqladmin kill)</hint><commands>GET_LOCK(str,timeout)</commands></script><script><caption>INET_ATON</caption><hint>Returns an integer that represents the numeric value for a network address Addresses may be 4 or 8 byte addresses</hint><commands>INET_ATON(expr)</commands></script><script><caption>INET_NTOA</caption><hint>Returns the network address (4 or 8 byte) for the numeric expression</hint><commands>INET_NTOA(expr)</commands></script><script><caption>IS_FREE_LOCK</caption><hint>Checks whether the lock named str is free to use (that is, not locked)</hint><commands>IS_FREE_LOCK(str)</commands></script><script><caption>IS_USED_LOCK</caption><hint>Checks whether the lock named str is in use (that is, locked)</hint><commands>IS_USED_LOCK(str)</commands></script><script><caption>MASTER_POS_WAIT</caption><hint>This function is useful for control of master/slave synchronization</hint><commands>MASTER_POS_WAIT(log_name,log_pos[,timeout])</commands></script><script><caption>SLEEP</caption><hint>Pauses for the number of seconds given by its argument</hint><commands>SLEEP(Seconds)</commands></script><script><caption>UUID</caption><hint>Returns a Universal Unique Identifier (UUID) generated according to DCE 1.1</hint><commands>UUID()</commands></script></scripts><scripts><caption>Numeric</caption><script><caption>ABS</caption><hint>Returns the absolute value of X</hint><commands>ABS(X)</commands></script><script><caption>ACOS</caption><hint>Returns the arc cosine of X, that is, the value whose cosine is X. Returns NULL if X is not in the range -1 to 1</hint><commands>ACOS(X)</commands></script><script><caption>ASIN</caption><hint>Returns the arc sine of X, that is, the value whose sine is X. Returns NULL if X is not in the range -1 to 1</hint><commands>ASIN(X)</commands></script><script><caption>ATAN</caption><hint>Returns the arc tangent of X, that is, the value whose tangent is X</hint><commands>ATAN(X)</commands></script><script><caption>ATAN2</caption><hint>Returns the arc tangent of the two variables X and Y. It is similar to calculating the arc tangent of Y / X, except that the signs of both arguments are used to determine the quadrant of the result</hint><commands>ATAN2(X,Y)</commands></script><script><caption>CEILING</caption><hint>Returns the smallest integer value not less than X</hint><commands>CEILING(X)</commands></script><script><caption>COS</caption><hint>Returns the cosine of X, where X is given in radians</hint><commands>COS(X)</commands></script><script><caption>COT</caption><hint>Returns the cotangent of X</hint><commands>COT(X)</commands></script><script><caption>CRC32</caption><hint>Computes a cyclic redundancy check value and returns a 32-bit unsigned value</hint><commands>CRC32(expr)</commands></script><script><caption>DEGRESS</caption><hint>Returns the argument X, converted from radians to degrees</hint><commands>DEGREES(X)</commands></script><script><caption>EXP</caption><hint>Returns the value of e (the base of natural logarithms) raised to the power of X</hint><commands>EXP(X)</commands></script><script><caption>FLOOR</caption><hint>Returns the largest integer value not greater than X</hint><commands>FLOOR(X)</commands></script><script><caption>LOG</caption><hint>Returns the natural logarithm of X</hint><commands>LOG(X)</commands></script><script><caption>LOG10</caption><hint>Returns the base-10 logarithm of X</hint><commands>LOG10(X)</commands></script><script><caption>LOG2</caption><hint>Returns the base-2 logarithm of X</hint><commands>LOG2(X)</commands></script><script><caption>MOD</caption><hint>Modulo (like the % operator in C). Returns the remainder of N divided by M</hint><commands>MOD(N,M)</commands></script><script><caption>OCT</caption><hint>Returns a string representation of the octal value of N, where N is a longlong number</hint><commands>OCT(N)</commands></script><script><caption>PI</caption><hint>Returns the value of PI</hint><commands>PI()</commands></script><script><caption>POW</caption><hint>Returns the value of X raised to the power of Y</hint><commands>POW(X,Y)</commands></script><script><caption>POWER</caption><hint>Returns the value of X raised to the power of Y</hint><commands>POWER(X,Y)</commands></script><script><caption>RADIANS</caption><hint>Returns the argument X, converted from degrees to radians</hint><commands>RADIANS(X)</commands></script><script><caption>RAND</caption><hint>Returns a random floating-point value in the range 0 to 1.0. If an integer argument N is specified, it is used as the seed value</hint><commands>RAND(N)</commands></script><script><caption>ROUND</caption><hint>Returns the argument X, rounded to a number with D decimals. If D is 0, the result will have no decimal point.</hint><commands>ROUND(X,D)</commands></script><script><caption>SIGN</caption><hint>Returns the sign of the argument as -1, 0 or 1, depending on whether X is negative, zero, or positive</hint><commands>SIGN(X)</commands></script><script><caption>SIN</caption><hint>Returns the sine of X, where X is given in radians</hint><commands>SIN(X)</commands></script><script><caption>SQRT</caption><hint>Returns the non-negative square root of X</hint><commands>SQRT(X)</commands></script><script><caption>TAN</caption><hint>Returns the tangent of X, where X is given in radians</hint><commands>TAN(X)</commands></script><script><caption>TRUNCATE</caption><hint>Returns the number X, truncated to D decimals. If D is 0, the result will have no decimal point or fractional part</hint><commands>TRUNCATE(X,D)</commands></script></scripts><scripts><caption>String</caption><script><caption>ASCII</caption><hint>Returns the ASCII code value of the leftmost character of the string str. Returns 0 if str is the empty string. Returns NULL if str is NULL</hint><commands>ASCII(str)</commands></script><script><caption>BIN</caption><hint>Returns a string representation of the binary value of N, where N is a longlong (BIGINT) number</hint><commands>BIN(N)</commands></script><script><caption>BIT_LENGTH</caption><hint>Returns the length of the string str in bits</hint><commands>BIT_LENGTH(str)</commands></script><script><caption>CHAR</caption><hint>interprets the arguments as integers and returns a string consisting of the characters given by the ASCII code values of those integers</hint><commands>CHAR(N,...)</commands></script><script><caption>CHAR_LENGTH</caption><hint>Returns the length of the string str</hint><commands>CHAR_LENGTH(str)</commands></script><script><caption>COMPRESS</caption><hint>Compresses a string. This function requires MySQL to have been compiled with a compression library such as zlib</hint><commands>COMPRESS(string_to_compress)</commands></script><script><caption>CONCAT</caption><hint>Returns the string that results from concatenating the arguments</hint><commands>CONCAT(str1,str2,...)</commands></script><script><caption>CONCAT_WS</caption><hint>stands for CONCAT With Separator and is a special form of CONCAT(). The first argument is the separator for the rest of the argument</hint><commands>CONCAT_WS(separator, str1, str2,...)</commands></script><script><caption>CONV</caption><hint>Converts numbers between different number bases. Returns a string representation of the number N, converted from base from_base to base to_base</hint><commands>CONV(N,from_base,to_base)</commands></script><script><caption>CONVERT</caption><hint>Provides a way to convert data between different character sets</hint><commands>CONVERT(expr USING transcoding_name)</commands></script><script><caption>ELT</caption><hint>Returns str1 if N = 1, str2 if N = 2, and so on. Returns NULL if N is less than 1 or greater than the number of arguments. ELT() is the complement of FIELD()</hint><commands>ELT(N,str1,str2,str3,...)</commands></script><script><caption>EXPORT_SET</caption><hint>Returns a string where for every bit set in "bit", you get a "on" string and for every reset bit you get an "off" string. Each string is separated with "separator" (default ",") and only "number_of_bits" (default 64) of "bits" is used</hint><commands>EXPORT_SET(bits,on,off,[separator,[number_of_bits]])</commands></script><script><caption>FIELD</caption><hint>Returns the index of str in the str1, str2, str3, ... list. Returns 0 if str is not found. FIELD() is the complement of ELT()</hint><commands>FIELD(str,str1,str2,str3,...)</commands></script><script><caption>FIND_IN_SET</caption><hint>Returns a value 1 to N if the string str is in the list strlist consisting of N substrings. A string list is a string composed of substrings separated by "," characters</hint><commands>FIND_IN_SET(str,strlist)</commands></script><script><caption>HEX</caption><hint>Returns a string representation of the hexadecimal value of N, where N is a longlong (BIGINT) number</hint><commands>HEX(N)</commands></script><script><caption>INSERT</caption><hint>Returns the string str, with the substring beginning at position pos and len characters long replaced by the string newstr</hint><commands>INSERT(str,pos,len,newstr)</commands></script><script><caption>INSTR</caption><hint>Returns the position of the first occurrence of substring substr in string st</hint><commands>INSTR(str,substr)</commands></script><script><caption>LCASE</caption><hint>Returns the string str with all characters changed to lowercase according to the current character set mapping (the default is ISO-8859-1 Latin1)</hint><commands>LCASE(str)</commands></script><script><caption>LEFT</caption><hint>Returns the leftmost len characters from the string str</hint><commands>LEFT(str,len)</commands></script><script><caption>LENGTH</caption><hint>Returns the length of the string str</hint><commands>LENGTH(str)</commands></script><script><caption>LOAD_FILE</caption><hint>Reads the file and returns the file contents as a string</hint><commands>LOAD_FILE(file_name)</commands></script><script><caption>LOCATE</caption><hint>Returns the position of the first occurrence of substring substr in string str, starting at position pos</hint><commands>LOCATE(substr,str[,pos])</commands></script><script><caption>LOWER</caption><hint>Returns the string str with all characters changed to lowercase according to the current character set mapping (the default is ISO-8859-1 Latin1)</hint><commands>LOWER(str)</commands></script><script><caption>LPAD</caption><hint>Returns the string str, left-padded with the string padstr until str is len characters long</hint><commands>LPAD(str,len,padstr)</commands></script><script><caption>LTRIM</caption><hint>Returns the string str with leading space characters removed</hint><commands>LTRIM(str)</commands></script><script><caption>MAKE_SET</caption><hint>Returns a set (a string containing substrings separated by "," characters) consisting of the strings that have the corresponding bit in bits set. str1 corresponds to bit 0, str2 to bit 1, etc. NULL strings in str1, str2, ... are not appended to the result</hint><commands>MAKE_SET(bits,str1,str2,...)</commands></script><script><caption>MID</caption><hint>Returns a substring len characters long from string str, starting at position pos</hint><commands>MID(str,pos,len)</commands></script><script><caption>OCTET_LENGTH</caption><hint>Returns the length of the string str</hint><commands>OCTET_LENGTH(str)</commands></script><script><caption>ORD</caption><hint>If the leftmost character of the string str is a multi-byte character, returns the code of multi-byte character by returning the ASCII code value of the characte</hint><commands>ORD(str)</commands></script><script><caption>POSITION</caption><hint>POSITION(substr IN str) is a synonym for LOCATE(substr,str)</hint><commands>POSITION(substr IN str)</commands></script><script><caption>QUOTE</caption><hint>Quotes a string to produce a result that can be used as a properly escaped data value in an SQL statement</hint><commands>QUOTE(str)</commands></script><script><caption>REPEAT</caption><hint>Returns a string consisting of the string str repeated count times. If count &lt;= 0, returns an empty string</hint><commands>REPEAT(str,count)</commands></script><script><caption>REPLACE</caption><hint>Returns the string str with all all occurrences of the string from_str replaced by the string to_str</hint><commands>REPLACE(str,from_str,to_str)</commands></script><script><caption>REVERSE</caption><hint>Returns the string str with the order of the characters reversed</hint><commands>REVERSE(str)</commands></script><script><caption>RIGHT</caption><hint>Returns the rightmost len characters from the string str</hint><commands>RIGHT(str,len)</commands></script><script><caption>RPAD</caption><hint>Returns the string str, right-padded with the string padstr until str is len characters long</hint><commands>RPAD(str,len,padstr)</commands></script><script><caption>RTRIM</caption><hint>Returns the string str with trailing space characters removed</hint><commands>RTRIM(str)</commands></script><script><caption>SOUNDEX</caption><hint>Returns a soundex string from str. Two strings that sound "about the same" should have identical soundex strings</hint><commands>SOUNDEX(str)</commands></script><script><caption>SPACE</caption><hint>Returns a string consisting of N space characters</hint><commands>SPACE(N)</commands></script><script><caption>SUBSTRING</caption><hint>Returns a substring len characters long from string str, starting at position pos</hint><commands>SUBSTRING(str,pos[,len])</commands></script><script><caption>SUBSTRING_INDEX</caption><hint>Returns the substring from string str before count occurrences of the delimiter delim</hint><commands>SUBSTRING_INDEX(str,delim,count)</commands></script><script><caption>TRIM</caption><hint>LEADING | TRAILING] [remstr] FROM] str)|Returns the string str with all remstr prefixes and/or suffixes removed. If none of the specifiers BOTH, LEADING or TRAILING are given, BOTH is assumed</hint><commands>TRIM([[BOTH</commands></script><script><caption>UCASE</caption><hint>Returns the string str with all characters changed to uppercase according to the current character set mapping (the default is ISO-8859-1 Latin1)</hint><commands>UCASE(str)</commands></script><script><caption>UNCOMPRESS</caption><hint>Uncompresses a string compressed by the COMPRESS() function</hint><commands>UNCOMPRESS(string_to_uncompress)</commands></script><script><caption>UNCOMPRESSED_LENGTH</caption><hint>Returns the length of a compressed string before compression</hint><commands>UNCOMPRESSED_LENGTH(compressed_string)</commands></script><script><caption>UPPER</caption><hint>Returns the string str with all characters changed to uppercase according to the current character set mapping (the default is ISO-8859-1 Latin1)</hint><commands>UPPER(str)</commands></script></scripts><scripts><caption>xml</caption><script><caption>ExtractValue</caption><hint>Returns the value of a XML fragment described by a XPath expression.</hint><commands>ExtractValue(xml_frag, xpath_expr)</commands></script><script><caption>UpdateXML</caption><hint>Returns a changed XML portion by a new XML fragment of a given XML fragment.</hint><commands>UpdateXML(xml_target, xpath_expr, new_xml)</commands></script></scripts></scripts>
